---
- hosts: jenkins
  remote_user: "{{ remote_user | default('ubuntu') }}"
  become: True
  tasks:
    - name: Set hostname
      hostname: name={{ hostname }}
      tags:
        - newrelic

    - name: Install common Ops packages
      apt: name={{ item }} state=present update_cache=yes cache_valid_time=600
      with_items:
        - htop
        - python-virtualenv
        - python-pip
        - sharutils
        - s3cmd
        - python-magic  # Make s3cmd happier
        - mosh
        - tmux
        - mc
        - python-dev
        - libffi-dev
        - libssl-dev
        - subversion
        - supervisor
        - apt-transport-https
        - ca-certificates
        - openjdk-8-jre
        - openjdk-8-jdk
        - openjdk-8-jdk-headless
        - apache2-utils

    - name: Install a newer kernel
      apt: name=linux-image-{{ kernel }} state=present update_cache=yes cache_valid_time=600
      with_items:
        - "{{ kernel }}"
        - "linux-image-extra-{{ kernel }}"
      register: kernel_installed

    - name: Reboot server
      shell: reboot
      when: "kernel_installed|changed"

    - name: Wait for server to restart
      local_action:
        module: wait_for host={{ inventory_hostname }} port=22 delay=1
      become: false
      when: "kernel_installed|changed"

    - name: Add NewRelic repository key
      apt_key: url=https://download.newrelic.com/548C16BF.gpg state=present
      tags:
        - newrelic

    - name: Add NewRelic repository
      apt_repository:
        repo='deb http://apt.newrelic.com/debian/ newrelic non-free'
        state=present
        update_cache=yes
      tags:
        - newrelic

    - name: Install NewRelic
      apt: name=newrelic-sysmond state=present update_cache=yes cache_valid_time=300
      tags:
        - newrelic

    - name: Copy NewRelic Configuration
      template:
        src: templates/nrsysmond.cfg.j2
        dest: /etc/newrelic/nrsysmond.cfg
        group: newrelic
        owner: root
        mode: 0640
      notify:
        - Restart newrelic
      tags:
        - newrelic

    - name: Add Datadog repository key
      apt_key:
        keyserver=keyserver.ubuntu.com
        id=C7A7DA52
        state=present
      tags:
        - datadog

    - name: Add Datadog repository
      apt_repository:
        repo='deb https://apt.datadoghq.com/ stable main'
        state=present
        update_cache=yes
      tags:
        - datadog

    - name: Install Datadog
      apt: name=datadog-agent state=present update_cache=yes cache_valid_time=300
      tags:
        - datadog

    - name: Copy Datadog Configuration
      template:
        src: templates/datadog.cfg.j2
        dest: /etc/dd-agent/datadog.conf
        group: root
        owner: dd-agent
        mode: 0640
      notify:
        - Restart datadog
      tags:
        - datadog

    - name: Install mailutils for email sending
      apt: name=mailutils state=present update_cache=yes cache_valid_time=600

    - name: Set Postfix to listen on 127.0.0.1 only
      command:
        postconf -e 'inet_interfaces = 127.0.0.1'
      notify:
        - Restart Postfix

    - name: Install nginx
      apt: name=nginx-light state=present update_cache=yes cache_valid_time=600

    # We are going into maintenance mode, stop nginx.
    - name: Stop nginx
      service: name=nginx state=stopped
      tags:
        - install-plugins

    - name: Copy SSL key
      copy:
        src=ssl/ssl.key
        dest=/etc/nginx/ssl.key
        force=yes
        mode=0600
        owner=root
        group=root

    - name: Copy SSL cert
      copy:
        src=ssl/ssl.crt
        dest=/etc/nginx/ssl.crt
        force=yes
        mode=0600
        owner=root
        group=root

    - name: Copy nginx configuration
      template:
        src: templates/nginx-cfg.j2
        dest: /etc/nginx/sites-enabled/default
        group: root
        owner: root
        mode: 0644
      notify: Reload Nginx

    - name: Add Docker Repository Key
      apt_key:
        state=present
        url=https://yum.dockerproject.org/gpg
      tags:
        - docker

    - name: Add Docker Repository
      apt_repository:
        repo='deb https://apt.dockerproject.org/repo/ {{ ansible_distribution|lower }}-{{ ansible_distribution_release|lower }} main'
        state=present
        update_cache=yes
      tags:
        - docker

    - name: Install Docker
      apt: name=docker-engine=1.13.* state=present update_cache=yes cache_valid_time=600
      tags:
        - docker

    - name: Set Docker to use AUFS
      lineinfile:
        dest=/etc/default/docker
        regexp=^DOCKER_OPTS=
        line='DOCKER_OPTS="-s aufs  --insecure-registry=http://localhost:5000,http://localhost:5001"'
      notify: Restart Docker
      tags:
        - docker

    - name: Add Jenkins-CI Repository Key
      apt_key: url=http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key state=present

    - name: Add Jenkins-CI Repository
      apt_repository:
        repo='deb http://pkg.jenkins-ci.org/debian binary/'
        state=present
        update_cache=yes

    - name: Install Jenkins-CI
      apt: name=jenkins state=present update_cache=yes cache_valid_time=600
      notify:
        - Restart Jenkins
      register: install_jenkins

    - name: Add Jenkins user to docker group
      user: name=jenkins groups=docker
      notify: Restart Jenkins

    - name: Set Jenkins-CI to listen only on 127.0.0.1
      lineinfile:
        dest=/etc/default/jenkins
        regexp=^JENKINS_ARGS=
        line='JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=$HTTP_PORT --httpListenAddress=127.0.0.1"'
      notify: Restart Jenkins
      tags:
        - jenkins-conf

    - name: Enable Jenkins-CI Permissive Script Plugin
      lineinfile:
        dest=/etc/default/jenkins
        regexp=^JAVA_ARGS=
        line='JAVA_ARGS="-Djava.awt.headless=true -Dpermissive-script-security.enabled=true"'
      notify: Restart Jenkins
      tags:
        - jenkins-conf

    - name: Set Jenkins-CI gitconfig
      template:
        src: templates/gitconfig.j2
        dest: /var/lib/jenkins/.gitconfig
        group: jenkins
        owner: jenkins
        mode: 0640
        backup: yes
      tags:
        - jenkins-conf

    - name: Start nginx
      service: name=nginx state=started

    - name: Copy docker-cleanup script
      template:
        src: bin/docker-cleanup.sh
        dest: /usr/local/bin/remove-docker-images.sh
        mode: 0755

    - name: Create cron job for docker-cleanup script
      cron: name="Remove docker images" minute=0 hour=3 weekday=0
            user="root" job="/usr/local/bin/remove-docker-images.sh 2> /dev/null"
            cron_file=remove_docker_images

    - name: Copy s3cfg configuration (used for backups)
      template:
        src=templates/s3cfg.j2
        dest="/home/{{ remote_user }}/.s3cfg"
        mode=0600

    - name: Create jenkins backup job
      cron: name="Backup Jenkins" minute=0 hour=4
            user="root"
            job="(s3cmd -c /home/{{ remote_user }}/.s3cfg put -r /var/lib/jenkins/backups/*.zip s3://{{ aws_backup_bucket }} --encrypt 2> /dev/null) && curl -s  {{ jenkins_backup_dms }}"
            cron_file=backup_jenkins


    - name: Set supervisor configuration
      template:
        src: "templates/{{ item }}"
        dest: "/etc/supervisor/conf.d/{{ item }}"
        group: root
        owner: root
        mode: 0600
      with_items:
        - docker-registry-eu-west.conf
        - docker-registry-us-west.conf
      notify: Restart supervisor
      tags:
        - supervisor

  roles:
    - role: users
      tags:
        - users
      when: create_users

  handlers:
    - name: Reload Nginx
      service: name=nginx state=reloaded
      become_user: root

    - name: Restart Jenkins
      service: name=jenkins state=restarted
      become_user: root

    - name: Restart Postfix
      service: name=postfix state=restarted
      become_user: root

    - name: Restart newrelic
      service: name=newrelic-sysmond state=restarted
      become_user: root

    - name: Restart datadog
      service: name=datadog-agent state=restarted
      become_user: root

    - name: Restart Docker
      service: name=docker state=restarted
      become_user: root

    - name: Restart supervisor
      service: name=supervisor state=restarted
      become_user: root

  vars_files:
    - './vars/main.yml'
    - local_variables.yml
